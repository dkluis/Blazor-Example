@page "/CollectedDataGraph"

@inject TycherosMonitoringService Service
@using _4LL_Monitoring.Services

<MudText Typo="Typo.h4">Hourly Value Averages for @DateTime.UtcNow.Date.ToString("yyyy-MM-dd")</MudText>

<div>
    @*<MudSelect T="string" Label="Select API Name" @bind-Value="selectedApiName">
        @foreach (var apiName in apiNames)
        {
            <MudSelectItem T="string" Value="@apiName">@apiName</MudSelectItem>
        }
    </MudSelect>*@
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series"
              XAxisLabels="@XAxisLabels" Width="100%" Height="750" ChartOptions="options"
              CanHideSeries="true"></MudChart>
    <MudMenu Label="Interpolation Algorithm" FullWidth="true">
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Straight)">Straight</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.EndSlope)">End Slope</MudMenuItem>
        @*<MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Periodic)">Periodic</MudMenuItem>*@
    </MudMenu>
</div>

@code {
    private List<TycherosMonitoringService.AverageHourlyApiResult> _averages = new ();
    private List<string> apiNames = new () {"CheckOrders", "CheckLogins", "CheckRegistrations"};
    private string selectedApiName = "CheckOrders";
    private List<string> selectedListApiNames;

    private ChartOptions options = new ();
    private List<ChartSeries> Series = new ();
    private string[] XAxisLabels = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
        "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" };

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _averages = await Service.GetAverageHourlyApiResultAsync();
        OnSelectionChanged();

        options.InterpolationOption = InterpolationOption.Straight;
        options.YAxisTicks = 100;
        options.YAxisLines = true;
        options.YAxisRequireZeroPoint = true;
        options.MaxNumYAxisTicks = 15;
        options.LineStrokeWidth = 1;
        options.XAxisLines = true;

    }

    private void OnSelectionChanged()
    {
        var dateAvg = _averages.Where(x => x.Date == DateTime.UtcNow.Date);
        Series = new List<ChartSeries>()
        {
            new () { Name = "CheckOrders", Data = new double[24] },
            new () { Name = "CheckLogings", Data = new double[24]  },
            new () { Name = "CheckRegistrations", Data = new double[24] },
        };

        foreach (var rec in dateAvg)
        {
            if (rec.ApiName == "CheckOrders")
            {
                Series[0].Data[rec.Hour] = rec.AverageValue;
            }
            if (rec.ApiName == "CheckLogins")
            {
                Series[1].Data[rec.Hour] = rec.AverageValue;
            }
            if (rec.ApiName == "CheckRegistrations")
            {
                Series[2].Data[rec.Hour] = rec.AverageValue;
            }
        }
    }


    
}
