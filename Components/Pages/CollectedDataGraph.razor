@page "/CollectedDataGraph"

@inject DbService Service
@using _4LL_Monitoring.Services


<MudPaper Outlined="true" Elevation="2" Class="p-4" Style="border-radius: 25px;">
    <MudGrid Justify="Justify.Center" Spacing="6">
        <MudItem>
            <MudPaper Style="margin-bottom: 10px">
                <MudText Typo="Typo.h4">Hourly Value Averages for @(_startDate?.ToString("yyyy-MM-dd"))</MudText>
                <MudItem xs="4" md="4">
                    <MudText Typo="Typo.body1">Select Date</MudText>
                </MudItem>
                <MudItem xs="4" md="4">
                    <MudDatePicker Style="margin-bottom: 10px" @bind-Date="_startDate"/>
                </MudItem>
            </MudPaper>
            <MudPaper>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSelectionChanged">
                    Submit Dates
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>
<MudPaper Outlined="true" Elevation="2" Class="p-4" Style="border-radius: 25px;">
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series"
              XAxisLabels="@XAxisLabels" Width="100%" Height="750" ChartOptions="options"
              CanHideSeries="true"></MudChart>
    <MudMenu Label="Interpolation Algorithm" FullWidth="true">
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Straight)">Straight</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
    </MudMenu>
</MudPaper>


@code {
    private List<DbService.AverageHourlyApiResult> _averages       = new();
    private List<string>                                           apiNames        = new() {"CheckOrders", "CheckLogins", "CheckRegistrations"};
    private string                                                 selectedApiName = "CheckOrders";
    private List<string>                                           selectedListApiNames;
    private DateTime?                                              _startDate = DateTime.UtcNow;
    private DateTime?                                              _endDate   = DateTime.UtcNow;
    private ChartOptions                                           options    = new();
    private List<ChartSeries>                                      Series     = new();
    private string[] XAxisLabels =
    {
        "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
        "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"
    };

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await OnSelectionChanged();

        options.InterpolationOption   = InterpolationOption.Straight;
        options.YAxisTicks            = 100;
        options.YAxisLines            = true;
        options.YAxisRequireZeroPoint = true;
        options.MaxNumYAxisTicks      = 15;
        options.LineStrokeWidth       = 1;
        options.XAxisLines            = true;
    }

    private async Task OnSelectionChanged()
    {
        _endDate  = _startDate;
        _averages = await Service.GetAverageHourlyApiResultAsync(_startDate, _endDate);

        Series = new List<ChartSeries>()
        {
            new() {Name = "CheckOrders", Data        = new double[24]},
            new() {Name = "CheckLogings", Data       = new double[24]},
            new() {Name = "CheckRegistrations", Data = new double[24]},
        };

        foreach (var rec in _averages)
        {
            if (rec.ApiName == "CheckOrders")
            {
                Series[0].Data[rec.Hour] = rec.AverageValue;
            }
            if (rec.ApiName == "CheckLogins")
            {
                Series[1].Data[rec.Hour] = rec.AverageValue;
            }
            if (rec.ApiName == "CheckRegistrations")
            {
                Series[2].Data[rec.Hour] = rec.AverageValue;
            }
        }
    }

}
